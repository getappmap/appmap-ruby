diff --git a/native_c_extension/bench.rb b/native_c_extension/bench.rb
index 550774e..55c93ae 100644
--- a/native_c_extension/bench.rb
+++ b/native_c_extension/bench.rb
@@ -95,35 +95,35 @@ def benchmark_c_custom_to_s(n, data_name, data)
 end
 
 symbols = [
-  :data_nil,
-  :data_true,
-  :data_false,
-  :data_int,
-  :data_float,
-  # :data_time,
-  # :data_date,
-  :data_sym,
-  :data_str_8,
-  :data_str_16,
-  :data_str_32,
-  :data_str_64,
-  :data_str_128,
-  :data_str_above_max_string_length,
-  # :data_file,
-  # :data_net_http,
-  # :data_net_httpgenericrequest,
+  # :data_nil,
+  # :data_true,
+  # :data_false,
+  # :data_int,
+  # :data_float,
+  # # :data_time,
+  # # :data_date,
+  # :data_sym,
+  # :data_str_8,
+  # :data_str_16,
+  # :data_str_32,
+  # :data_str_64,
+  # :data_str_128,
+  # :data_str_above_max_string_length,
+  # # :data_file,
+  # # :data_net_http,
+  # # :data_net_httpgenericrequest,
   :data_hash,
   :data_hash_more_than_max,
-  :data_array_int,
-  :data_array_int_more_than_max,
-  :data_array_float,
-  :data_array_float_more_than_max,
-  :data_array_str8,
-  :data_array_str8_more_than_max,
-  :data_array_mix,
-  :data_array_hash,
-  :data_array_hash_more_than_max,
-  # :data_array_file,
+  # :data_array_int,
+  # :data_array_int_more_than_max,
+  # :data_array_float,
+  # :data_array_float_more_than_max,
+  # :data_array_str8,
+  # :data_array_str8_more_than_max,
+  # :data_array_mix,
+  # :data_array_hash,
+  # :data_array_hash_more_than_max,
+  # # :data_array_file,
 ]
 
 
diff --git a/native_c_extension/c_custom_to_s.c b/native_c_extension/c_custom_to_s.c
index d5cdad0..02978e4 100644
--- a/native_c_extension/c_custom_to_s.c
+++ b/native_c_extension/c_custom_to_s.c
@@ -19,19 +19,18 @@ const int MAX_ARRAY_ENUMERATION = 10;
 const int MAX_HASH_ENUMERATION = 10;
 const int MAX_STRING_LENGTH = 100;
 
-void method_c_custom_to_s_check_buffer_size(int offset, int string_len, int buffer_max) {
+void method_c_custom_to_s_check_buffer_size(int offset, int string_len, int buffer_max, const char *origin) {
   if (offset + string_len > buffer_max) {
     // don't corrupt the buffer; throw exception
-    rb_raise(rb_eRuntimeError, "method_c_custom_t_s_element would write %d bytes outside the buffer", offset + string_len - buffer_max);
+    rb_raise(rb_eRuntimeError, "method_c_custom_t_s_element would write %d bytes outside the buffer from %s", offset + string_len - buffer_max, origin);
   }
 }
 
 int method_c_custom_to_s_element(VALUE self, char *buffer, int *offset, VALUE element, int buffer_max, char quoted) {
-
   switch (TYPE(element)) {
   case T_NIL: {
     int string_len = 3; // +1 for NULL
-    method_c_custom_to_s_check_buffer_size(*offset, string_len + 1, buffer_max);
+    method_c_custom_to_s_check_buffer_size(*offset, string_len + 1, buffer_max, "method_c_custom_t_to_s_element nil");
     snprintf(&buffer[*offset], string_len + 1, "%s", "nil");
     *offset += string_len;
     break;
@@ -40,7 +39,7 @@ int method_c_custom_to_s_element(VALUE self, char *buffer, int *offset, VALUE el
     VALUE element_to_s = method_c_custom_to_s(self, element);
     int string_len = RSTRING_LEN(element_to_s);
     // +2 for the two "s. +1 for NULL
-    method_c_custom_to_s_check_buffer_size(*offset, string_len + 3, buffer_max);
+    method_c_custom_to_s_check_buffer_size(*offset, string_len + 3, buffer_max, "method_c_custom_t_to_s_element string");
     if (quoted) {
       snprintf(&buffer[*offset], 1 + 1, "%s", "\"");
       *offset += 1;
@@ -80,14 +79,14 @@ VALUE method_c_custom_to_s_array(VALUE self, VALUE value) {
   }
 
   // 2: for "[" and \0
-  method_c_custom_to_s_check_buffer_size(offset, 2, buffer_max);
+  method_c_custom_to_s_check_buffer_size(offset, 2, buffer_max, "method_c_custom_t_to_s_array 1");
   snprintf(&buffer[offset], 1 + 1, "%s", "[");
   offset += 1;
   int counter = 0;
   while (counter < max_len) {
     if (counter > 0) {
       // 3: ", " and \0
-      method_c_custom_to_s_check_buffer_size(offset, 3, buffer_max);
+      method_c_custom_to_s_check_buffer_size(offset, 3, buffer_max, "method_c_custom_t_to_s_array 2");
       snprintf(&buffer[offset], 2 + 1, "%s", ", ");
       offset += 2;
     }
@@ -105,14 +104,14 @@ VALUE method_c_custom_to_s_array(VALUE self, VALUE value) {
     int buffer_small_len = strlen(buffer_small);
 
     // 2: for "]" and NULL
-    method_c_custom_to_s_check_buffer_size(offset, buffer_small_len + 2, buffer_max);
+    method_c_custom_to_s_check_buffer_size(offset, buffer_small_len + 2, buffer_max, "method_c_custom_t_to_s_array 3");
     snprintf(&buffer[offset], buffer_small_len + 1, "%s", buffer_small);
     offset += buffer_small_len;
     snprintf(&buffer[offset], 1 + 1, "%s", "]");
     offset += 1;
   } else {
     // 2: for "]" and NULL
-    method_c_custom_to_s_check_buffer_size(offset, 2, buffer_max);
+    method_c_custom_to_s_check_buffer_size(offset, 2, buffer_max, "method_c_custom_t_to_s_array 4");
     snprintf(&buffer[offset], 1 + 1, "%s", "]");
     offset += 1;    
   }
@@ -130,7 +129,7 @@ struct method_c_custom_to_s_hash_iterator_state_s {
   int *counter;
   int max_len;
   int remaining_elements;
-  char *remaining_elements_shown;
+  char remaining_elements_shown;
 };
 
 int method_c_custom_to_s_hash_iterator(VALUE key, VALUE val, VALUE arg) {
@@ -143,28 +142,43 @@ int method_c_custom_to_s_hash_iterator(VALUE key, VALUE val, VALUE arg) {
       int buffer_small_len = strlen(buffer_small);
 
       // +1 for NULL
-      method_c_custom_to_s_check_buffer_size(*state->offset, buffer_small_len + 1, state->buffer_max);
+      method_c_custom_to_s_check_buffer_size(*state->offset, buffer_small_len + 1, state->buffer_max, "method_c_custom_t_to_s_hash_iterator 1");
       snprintf(&state->buffer[*state->offset], buffer_small_len + 1, "%s", buffer_small);
       *state->offset += buffer_small_len;
 
-      *state->remaining_elements_shown = 1;
+      state->remaining_elements_shown = 1;
     }
   } else {
     if (*state->counter > 0) {
       // 3: ", " and NULL
-      method_c_custom_to_s_check_buffer_size(*state->offset, 3, state->buffer_max);
+      method_c_custom_to_s_check_buffer_size(*state->offset, 3, state->buffer_max, "method_c_custom_t_to_s_hash_iterator 2");
       snprintf(&state->buffer[*state->offset], 3, "%s", ", ");
       *state->offset += 2;
     }
-  
-    method_c_custom_to_s_element(state->self, state->buffer, state->offset, key, state->buffer_max, 1);
-
-    // 3: "=>" and NULL
-    method_c_custom_to_s_check_buffer_size(*state->offset, 3, state->buffer_max);
-    snprintf(&state->buffer[*state->offset], 3, "%s", "=>");
-    *state->offset += 2;
-
-    method_c_custom_to_s_element(state->self, state->buffer, state->offset, val, state->buffer_max, 1);
+    int buffer_key_max = MAX_STRING_LENGTH;
+    char buffer_key[buffer_key_max];
+    int offset_key = 0;
+    int buffer_value_max = MAX_STRING_LENGTH;
+    char buffer_value[buffer_value_max];
+    int offset_value = 0;
+
+    // build the key and the value separately, and either add them
+    // both or stop adding if it would overflow the buffer
+    method_c_custom_to_s_element(state->self, buffer_key, &offset_key, key, buffer_key_max, 1);
+    method_c_custom_to_s_element(state->self, buffer_value, &offset_value, val, buffer_value_max, 1);
+
+    // +3 for "=>" and NULL
+    if (offset_key + offset_value + 3 > state->buffer_max) {
+      // stop adding: it would overflow the buffer
+    } else {
+      printf("will add for offset_key %d\n", offset_key);
+      snprintf(&state->buffer[*state->offset], offset_key + 1, "%s", buffer_key);
+      *state->offset += offset_key;
+      snprintf(&state->buffer[*state->offset], 3, "%s", "=>");
+      *state->offset += 2;
+      snprintf(&state->buffer[*state->offset], offset_value + 1, "%s", buffer_value);
+      *state->offset += offset_value;
+    }
   }
 
   *state->counter += 1;
@@ -206,7 +220,7 @@ VALUE method_c_custom_to_s_hash(VALUE self, VALUE value) {
   rb_hash_foreach(value, &method_c_custom_to_s_hash_iterator, (VALUE) &state);
 
   // 2: "}" and \0
-  method_c_custom_to_s_check_buffer_size(*state.offset, 2, state.buffer_max);
+  method_c_custom_to_s_check_buffer_size(*state.offset, 2, state.buffer_max, "method_c_custom_t_to_s_hash");
   snprintf(&buffer[offset], 1 + 1, "%s", "}");
   offset += 1;
   
@@ -247,7 +261,7 @@ VALUE method_c_custom_to_s(VALUE self, VALUE first) {
     int max_len = strlen(name);
     int offset = 0;
     // +1 for : +1 for NULL
-    method_c_custom_to_s_check_buffer_size(offset, max_len + 2, buffer_max);
+    method_c_custom_to_s_check_buffer_size(offset, max_len + 2, buffer_max, "method_c_custom_t_to_s symbol");
     snprintf(buffer, max_len + 2, ":%s", name);
     ret = rb_str_new_cstr(buffer);
     break;
@@ -260,7 +274,7 @@ VALUE method_c_custom_to_s(VALUE self, VALUE first) {
       max_len = MAX_STRING_LENGTH;
     }
     max_len += 1; // +1 for NULL written by snprintf
-    method_c_custom_to_s_check_buffer_size(0, max_len, buffer_max);
+    method_c_custom_to_s_check_buffer_size(0, max_len, buffer_max, "method_c_custom_t_to_s string 1");
     // something's strange with StringValueCStr and StringValuePtr,
     // because sprintf causes a buffer overflow but snprintf doesn't.
     snprintf(buffer, max_len, "%s", StringValuePtr(first));
@@ -274,7 +288,7 @@ VALUE method_c_custom_to_s(VALUE self, VALUE first) {
       int offset = max_len - 1;
 
       // +1 for NULL
-      method_c_custom_to_s_check_buffer_size(offset, buffer_small_len + 1, buffer_max);
+      method_c_custom_to_s_check_buffer_size(offset, buffer_small_len + 1, buffer_max, "method_c_custom_t_to_s symbol 2");
       snprintf(&buffer[offset], buffer_small_len + 1, "%s", buffer_small);
       offset += buffer_small_len;
     }
